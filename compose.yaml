version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-1
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-2
    depends_on:
      - zookeeper
    ports:
      - "39092:39092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  discovery-server:
    build: ./discovery-server
    image: fladoss/discovery-server:1.0
    container_name: discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "-u", "eureka:eureka", "http://0.0.0.0:8761" ]
      interval: 10s
      timeout: 10s
      retries: 10

  api-gateway:
    build: ./api-gateway
    image: fladoss/api-gateway:1.0
    container_name: api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8800:8800"
    depends_on:
      discovery-server:
        condition: service_healthy
      keycloak:
        condition: service_started
      zipkin:
        condition: service_started

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: POSTGRESQL
      DB_ADDR: keycloak_db
      DB_PORT: 18080
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_HEALTH_ENABLED: true
    ports:
      - "8080:8080"
    volumes:
      - ./realms:/opt/keycloak/data/import/
    depends_on:
      keycloak_db:
        condition: service_healthy

  keycloak_db:
    image: postgres:15.2
    container_name: keycloak_db
    environment:
      POSTGRES_DB: keycloak_db_vol
      POSTGRES_USER: vlados
      POSTGRES_PASSWORD: vlados
    volumes:
      - keycloak_db_vol:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -p 18080 -U vlados -d keycloak_db" ]
      interval: 3s
      timeout: 3s
      retries: 5
    expose:
      - "18080"
    ports:
      - "18080:18080"
    command: -p 18080
    restart: unless-stopped

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  notification-service:
    build: ./notification-service
    image: fladoss/notification-service:1.0
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      discovery-server:
        condition: service_healthy
      zipkin:
        condition: service_started

  product-service:
    build: ./product-service
    image: fladoss/product-service:1.0
    container_name: product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      product_service_db:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      zipkin:
        condition: service_started

  product_service_db:
    image: postgres:15.2
    environment:
      POSTGRES_DB: product_service_db
      POSTGRES_USER: vlados
      POSTGRES_PASSWORD: vlados
    volumes:
      - product_service_db_vol:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -p 5434 -U vlados -d product_service_db" ]
      interval: 3s
      timeout: 3s
      retries: 5
    expose:
      - "5434"
    ports:
      - "5434:5434"
    command: -p 5434
    restart: unless-stopped

  order-service:
    build: ./order-service
    image: fladoss/order-service:1.0
    container_name: order-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      order_service_db:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      zipkin:
        condition: service_started

  order_service_db:
    image: postgres:15.2
    environment:
      POSTGRES_DB: order_service_db
      POSTGRES_USER: vlados
      POSTGRES_PASSWORD: vlados
    volumes:
      - order_service_db_vol:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -p 5435 -U vlados -d order_service_db" ]
      interval: 3s
      timeout: 3s
      retries: 5
    expose:
      - "5435"
    ports:
      - "5435:5435"
    command: -p 5435
    restart: unless-stopped

  inventory-service:
    build: ./inventory-service
    deploy:
      replicas: 2
    image: fladoss/inventory-service:1.0
    #    container_name: inventory-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      inventory_service_db:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      zipkin:
        condition: service_started

  inventory_service_db:
    image: postgres:15.2
    environment:
      POSTGRES_DB: inventory_service_db
      POSTGRES_USER: vlados
      POSTGRES_PASSWORD: vlados
    volumes:
      - inventory_service_db_vol:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -p 5436 -U vlados -d inventory_service_db" ]
      interval: 3s
      timeout: 3s
      retries: 5
    expose:
      - "5436"
    ports:
      - "5436:5436"
    command: -p 5436
    restart: unless-stopped

volumes:
  product_service_db_vol:
    name: product_service_db_vol
  order_service_db_vol:
    name: order_service_db_vol
  inventory_service_db_vol:
    name: inventory_service_db_vol
  keycloak_vol:
    name: keycloak_vol
  keycloak_db_vol:
    name: keycloak_db_vol